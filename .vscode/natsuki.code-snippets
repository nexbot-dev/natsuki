{
	// Place your aenex workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Create a command": {
		"scope": "typescript",
		"prefix": "nexcommand",
		"body": [
			"import { NexClient } from '#core/NexClient';",
			"import { NexCommand } from '#core/NexCommand';",
			"import {",
			"\tChatInputCommandInteraction,",
			"\tSlashCommandBuilder,",
			"} from 'discord.js';",
			"",
			"export class AenexCommand extends NexCommand {",
			"\tdeclare public interaction: ChatInputCommandInteraction;",
			"",
			"\tconstructor(client?: NexClient) {",
			"\t\tsuper(client);",
			"\t}",
			"",
			"\tbuildApplicationCommand() {",
			"\t\treturn new SlashCommandBuilder()",
			"\t\t\t.setName('$1')",
			"\t\t\t.setDescription('$2')",
			"\t\t\t$3",
			"\t}",
			"",
			"\tasync executeApplicationCommand(interaction: ChatInputCommandInteraction) {",
			"\t\t$4",
			"\t}",
			"}",
		]
	}
}